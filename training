import os
import cv2
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications.densenet import DenseNet201
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense
from tensorflow.keras.models import Model
from sklearn.metrics import confusion_matrix, classification_report

# Set the dataset directory
dataset_directory = "real_image"

# Set the parameters for training
batch_size = 32
num_epochs = 20
image_height = 224
image_width = 224
num_classes = len(os.listdir(dataset_directory))

# Preprocess and augment the images in the dataset
data_generator = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

# Load and split the dataset into training and validation sets
train_generator = data_generator.flow_from_directory(
    dataset_directory,
    target_size=(image_height, image_width),
    batch_size=batch_size,
    class_mode='categorical',
    subset='training'
)

validation_generator = data_generator.flow_from_directory(
    dataset_directory,
    target_size=(image_height, image_width),
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation'
)

# Load the pre-trained DenseNet201 model (excluding the top layer)
base_model = DenseNet201(weights='imagenet', include_top=False, input_shape=(image_height, image_width, 3))

# Add a global average pooling layer and a fully connected layer
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(1024, activation='relu')(x)
predictions = Dense(num_classes, activation='softmax')(x)

# Create the model
model = Model(inputs=base_model.input, outputs=predictions)

# Freeze the layers in the base model
for layer in base_model.layers:
    layer.trainable = False

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(train_generator, epochs=num_epochs, validation_data=validation_generator)

# Save the trained model as an H5 file
model.save('trained_model.h5')

# Plot accuracy and loss curves
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

# Generate predictions for the validation set
validation_images = []
validation_labels = []
for images, labels in validation_generator:
    validation_images.extend(images)
    validation_labels.extend(labels)
    if len(validation_images) >= len(validation_generator):
        break

validation_images = np.array(validation_images)
validation_labels = np.array(validation_labels)

predictions = model.predict(validation_images)
predicted_labels = np.argmax(predictions, axis=1)

# Compute the confusion matrix
confusion_mat = confusion_matrix(np.argmax(validation_labels, axis=1), predicted_labels)
print("Confusion Matrix:")
print(confusion_mat)

# Compute precision, recall, and F1-score
classification_rep = classification_report(np.argmax(validation_labels, axis=1), predicted_labels)
print("Classification Report:")
print(classification_rep)

# Plot confusion matrix
plt.imshow(confusion_mat, interpolation='nearest', cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.colorbar()
tick_marks = np.arange(num_classes)
plt.xticks(tick_marks, os.listdir(dataset_directory), rotation=45)
plt.yticks(tick_marks, os.listdir(dataset_directory))
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

# Plot precision and recall
precision = confusion_mat.diagonal() / confusion_mat.sum(axis=0)
recall = confusion_mat.diagonal() / confusion_mat.sum(axis=1)

plt.figure(figsize=(8, 4))
plt.bar(range(num_classes), precision, color='blue', alpha=0.7, label='Precision')
plt.bar(range(num_classes), recall, color='red', alpha=0.7, label='Recall')
plt.xticks(range(num_classes), os.listdir(dataset_directory), rotation=45)
plt.xlabel('Class')
plt.ylabel('Score')
plt.title('Precision and Recall')
plt.legend()
plt.show()
