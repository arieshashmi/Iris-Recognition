import tkinter as tk
from tkinter import messagebox, filedialog
from PIL import Image, ImageTk
import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing.image import img_to_array
import os
import sys
from tkinter import *
from tkinter import messagebox
from tkinter import ttk, filedialog
from tkinter.filedialog import askopenfile
# import required module
from pathlib import Path     
from PIL import Image, ImageTk

root = tk.Tk()
root.geometry("600x350")
root.resizable(False, False)
root.title("Iris Recognition System")
root.config(bg="yellow")

# Create a Canvas widget
canvas = tk.Canvas(root, width=600, height=400)
canvas.pack()

# Load the background image
background_image = Image.open("abc.jpg")
background_image = background_image.resize((600, 400))
background_photo = ImageTk.PhotoImage(background_image)

# Display the background image on the Canvas
canvas.background = background_photo  # Store the reference to the image
canvas.create_image(0, 0, image=background_photo, anchor="nw")

# Create a frame for the content
content_frame = tk.Frame(canvas, bg="white")
content_frame.place(relx=0.5, rely=0.5, anchor="center")

tk.Label(root, text="Iris Recognition System", font=("Arial", 20, "bold"), fg="white", bg="blue", borderwidth=2,
         padx=10, pady=10, relief="ridge").place(x=125, y=10)


def quit_button():
    choice = messagebox.askyesno("Question", "Are You Sure?")
    if choice:
        root.destroy()


def open_file():
    global file2
    file = filedialog.askopenfile(mode='r', filetypes=[('Python Files', '*.jpeg')])
    if file:
        file2 = file.name
    else:
        file2 = None


def submit_fun(img_name):
    modelPath = "trained_model.h5"
    model = tf.keras.models.load_model(modelPath)
    image_path = img_name
    image = Image.open(image_path)
    resized_im = image.resize((224, 224))
    img = img_to_array(resized_im)
    img = np.expand_dims(img, axis=0)
    img /= 255.0
    labels = ["kainat", "asiya", "rehana", "tahira", "sakina", "hajira", "zehra"]
    result = model.predict(img)
    prob = result[0]
    conf = prob[np.argmax(prob)]
    value_holder = labels[np.argmax(result)]
    if conf > 0.60:
        messagebox.showinfo("Information", str(value_holder) + "\t\t\t")
    else:
        messagebox.showerror("Iris Selection Error", "Selected IRIS is Not Found!")


browse_button = tk.Button(root, text="Browse", command=open_file, font=("Arial", 14, "bold"), bg='white', fg='black')
browse_button.place(x=230, y=100)

submit_button = tk.Button(root, text="Result", command=lambda: submit_fun(file2), font=("Arial", 14, "bold"),
                          bg='white', fg='black')
submit_button.place(x=235, y=180)

quit_button = tk.Button(root, text="Exit", command=quit_button, font=("Arial", 16, "bold"), bg='white', fg='black')
quit_button.place(x=245, y=260)

root.mainloop()
